/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* Layers */
#define AL1 0
#define AL2 1
#define SM1 2
#define SM2 3
#define NUM 4
#define SYS 5
#define AL2U 6

&mt {
    tapping-term-ms = <251>;
    flavor = "tap-preferred";
 };
&sk {
     release-after-ms = <2000>;
     quick-release;
 };

/ {

    combos {
    };

    behaviors {
            hm_l: homerow_mods_left {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS_L";
                #binding-cells = <2>;
                tapping-term-ms = <300>;
                quick-tap-ms = <250>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>; // right hand
            };
            hm_r: homerow_mods_right {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_MODS_R";
                #binding-cells = <2>;
                tapping-term-ms = <300>;
                quick-tap-ms = <250>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
                hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>; // left hand
            };
            sr: shift_layer {
                compatible = "zmk,behavior-hold-tap";
                label = "SHIFT_LAYER";
                #binding-cells = <2>;
                tapping-term-ms = <300>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&to>;
                retro-tap;
            };
            hl_l: homerow_layers_left {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_LAYERS_L";
                #binding-cells = <2>;
                tapping-term-ms = <220>;
                quick-tap-ms = <250>;
                flavor = "tap-preferred";
                bindings = <&mo>, <&kp>;
                hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>; // right hand
            };
            hl_r: homerow_layers_right {
                compatible = "zmk,behavior-hold-tap";
                label = "HOMEROW_LAYERS_R";
                #binding-cells = <2>;
                tapping-term-ms = <220>;
                quick-tap-ms = <250>;
                flavor = "tap-preferred";
                bindings = <&mo>, <&kp>;
                hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24>; // left hand
            };
            td: tapdance {
                compatible = "zmk,behavior-hold-tap";
                label = "TAPDANCE";
                #binding-cells = <2>;
                tapping-term-ms = <190>;
                quick-tap-ms = <250>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };
            shrep: shift_repeat {
                    compatible = "zmk,behavior-hold-tap";
                    label = "SHIFT_REPEAT";
                    #binding-cells = <2>;
                    flavor = "hold-preferred";
                    tapping-term-ms = <400>;
                    quick-tap-ms = <200>;
                    bindings = <&kp>, <&key_repeat>;
                };
            alpha2macro: behavior_macro_1 {
                compatible = "zmk,behavior-macro";
                label = "MACRO1";
                #binding-cells = <0>;
                bindings = < &sl AL2 >;
            };
            caps_alpha2macro: behavior_macro_2 {
                compatible = "zmk,behavior-macro";
                label = "MACRO2";
                #binding-cells = <0>;
                bindings = < &sl AL2U >;
            };
    };

    macros {
        ws_find: ws_find {
            compatible = "zmk,behavior-macro";
            label = "ws_find_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LEFT_SHIFT &kp LEFT_SHIFT>;
        };
        prettier: prettier {
            compatible = "zmk,behavior-macro";
            label = "prettier_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_ALT &kp O>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_ALT &kp O>,
                <&macro_press>,
                <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp LEFT_ALT &kp P>,
                <&macro_release>,
                <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp LEFT_ALT &kp P>;
        };
    };

   // -----------------------------------------------------------------------------------------
   // |  0 |   1  |  2   |   3  |   4  |       |  5   |  6  |  7   |  8   |  9  |
   // | 10 |  11  |  12  |  13  |  14  |       |  15  |  16 |  17  |  18  |  19 |
   // | 20 |  21  |  22  |  23  |  24  |       |  25  |  26 |  27  |  28  |  29 |
   //                    |  30  |  31  |       |  32  |  33 |    
    keymap {
         compatible = "zmk,keymap";

         AL1 {
         label = "Base";
                        bindings = <
     &kp ESC  &hm_l LCTL L &hm_l LALT G &hm_l LGUI D  &none                                &none   &hm_r RGUI H  &hm_r LALT U  &hm_r RCTL C  &kp BSPC  
     &hl_l NUM A  &hl_l SM2 R  &hl_l SM1 S  &hl_l SYS T  &none                             &none   &hl_r SYS N  &hl_r SM1 E  &hl_r SM2 I  &hl_r NUM O  
     &kp ESC   &none   &none   &none   &none                                                 &none   &none   &none   &none  &kp BSPC   
     &mt LC(LS(LALT)) SPC  &shrep LSHIFT 0                                                 &caps_alpha2macro  &alpha2macro 
                        >;
                };

          AL2 {
          label = "Al2";
                         bindings = <
      &kp ESC  &kp V  &kp W   &kp P   &none                                 &none   &kp M   &kp J   &kp F &kp BSPC   
      &kp Q  &kp Z &kp X     &kp B    &none                                 &none   &kp K   &kp SQT &kp Y   &kp DOT  
      &kp ESC   &none   &none   &none   &none                                 &none   &none   &none   &none  &kp BSPC  
      &sr LSHIFT AL1      &none                                             &none    &sl AL2U  
                         >;
               };
                
         SM1 {
         label = "Code";
                        bindings = <
     &kp ESC   &kp STAR     &kp LS(N3)  &kp DLLR  &none                                 &none   &kp LS(COMMA)  &kp LS(DOT)  &kp MINUS  &kp BSPC   
     &kp BSLH   &kp GRAVE    &kp TILDE   &kp CARET  &none                               &none   &kp LBKT       &kp RBKT     &kp PIPE   &kp SLASH  
     &none   &none   &none   &none   &none                                              &none   &none          &none        &none      &none      
     &trans      &trans                                                                 &trans  &trans 
                        >;
                };
        
         SM2 {
         label = "Punct";
                        bindings = <
     &kp ESC    &kp ATSN    &kp QMARK   &prettier    &none                                 &none   &kp LPRN    &kp RPRN  &kp LS(MINUS)  &kp BSPC   
     &kp SEMI    &kp PRCNT   &kp EXCL     &ws_find   &none                                 &none   &kp LBRC    &kp RBRC    &kp AMPS    &kp COLON    
     &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  
     &trans  &trans                                                                        &trans &trans 
                        >;
                };
                
         NUM {
         label = "Num";
                        bindings = <
     &kp ESC  &hm_l LCTL DOT &hm_l LALT N0   &hm_l LGUI N1  &none                           &none   &hm_r RGUI N2   &hm_r LALT N3    &hm_r RCTL N4  &kp BSPC   
     &td SLASH MINUS   &td STAR PLUS  &kp N5    &kp N6   &none                              &none   &kp N7   &kp N8    &kp N9  &kp EQUAL  
     &none   &none   &none   &none   &none                                                  &none   &none   &none   &none  &none  
     &sr LSHIFT AL1  &bt BT_CLR_ALL                                                         &bt BT_NXT &kp RGUI 
                        >;
                };

         SYS {
         label = "Nav";
                        bindings = <
     &kp ESC &kp ESC &kp LG(LS(LBKT)) &kp LG(LS(RBKT))  &none                                 &none   &mt LG(V) LG(C)  &kp UP    &kp BKSP  &kp BSPC   
     &td LG(GRAVE) TAB   &kp DEL &kp LG(LBKT) &kp LG(RBKT)  &none                              &none   &kp LEFT         &kp DOWN  &kp RIGHT   &kp RET  
     &none   &none   &none   &none   &none                                                    &none   &none   &none   &none  &none  
     &sr LSHIFT AL1      &kp LALT                                                             &kp LSHIFT  &kp RGUI 
                        >;
                };

        AL2U {
        label = "Al2Caps";
                        bindings = <
     &kp ESC  &kp LS(V) &kp LS(W) &kp LS(P)  &none                                         &none   &kp LS(M)   &kp LS(J)    &kp LS(F)   &kp BSPC   
     &kp LS(Q)   &kp LS(Z)   &kp LS(X)   &kp LS(B)   &none                                 &none   &kp LS(K)   &kp DQT      &kp LS(Y)   &kp COMMA  
     &none   &none   &none   &none   &none                                                 &none   &none   &none   &none  &none  
     &trans  &trans                                                                        &trans &out OUT_TOG 
                        >;
                };
        };
};
